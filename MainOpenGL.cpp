#include <stdio.h>
#include <math.h>
#include <GL/glut.h>
#include "Vector3D.cpp"
#include "Matrix3D.cpp"
#include "Vector4D.cpp"
#include "Matrix4D.cpp"
//////////////////////////////////////
//                                  //
//                                  //
//        VARIABLES GLOBALES        //
//                                  //
//                                  //
//////////////////////////////////////

/*
g++ ant.cpp Arrow.cpp dodecahedron.cpp Extra_Operators.hpp geometry.cpp MainOpenGL.cpp matrix.cpp PovRayWriter.cpp simplex.cpp Turtle.cpp VectorND.cpp -lm -lGL -lGLU -lglut

*/

class HyperDodecahedron {
	
	private:
		Vector4D vertex[600];
		int edges[600][4];
		Vector4D normals[120];
		Vector4D center = Vector4D(0.0, 0.0, 0.0, 0.0);
		double r;
	public:

		HyperDodecahedron(double r, double iC) {
			
			this->r = r;
			Vector4D creator[600] = {
Vector4D(   0.0000000000,   -0.3819660113,   -1.0000000000,   -2.6180339887), 
Vector4D(   0.0000000000,    0.3819660113,   -1.0000000000,   -2.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,   -0.6180339887,   -2.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,   -0.6180339887,   -2.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,   -0.6180339887,   -2.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,   -0.6180339887,   -2.6180339887), 
Vector4D(  -1.0000000000,    0.0000000000,   -0.3819660113,   -2.6180339887), 
Vector4D(   1.0000000000,    0.0000000000,   -0.3819660113,   -2.6180339887), 
Vector4D(  -0.3819660113,   -1.0000000000,    0.0000000000,   -2.6180339887), 
Vector4D(   0.3819660113,   -1.0000000000,    0.0000000000,   -2.6180339887), 
Vector4D(  -0.3819660113,    1.0000000000,    0.0000000000,   -2.6180339887), 
Vector4D(   0.3819660113,    1.0000000000,    0.0000000000,   -2.6180339887), 
Vector4D(  -1.0000000000,    0.0000000000,    0.3819660113,   -2.6180339887), 
Vector4D(   1.0000000000,    0.0000000000,    0.3819660113,   -2.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,    0.6180339887,   -2.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,    0.6180339887,   -2.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,    0.6180339887,   -2.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,    0.6180339887,   -2.6180339887), 
Vector4D(   0.0000000000,   -0.3819660113,    1.0000000000,   -2.6180339887), 
Vector4D(   0.0000000000,    0.3819660113,    1.0000000000,   -2.6180339887), 
Vector4D(   0.0000000000,   -0.6180339887,   -1.6180339887,   -2.2360679775),
Vector4D(   0.0000000000,    0.6180339887,   -1.6180339887,   -2.2360679775), 
Vector4D(  -1.0000000000,   -1.0000000000,   -1.0000000000,   -2.2360679775), 
Vector4D(   1.0000000000,   -1.0000000000,   -1.0000000000,   -2.2360679775), 
Vector4D(  -1.0000000000,    1.0000000000,   -1.0000000000,   -2.2360679775), 
Vector4D(   1.0000000000,    1.0000000000,   -1.0000000000,   -2.2360679775), 
Vector4D(  -1.6180339887,    0.0000000000,   -0.6180339887,   -2.2360679775), 
Vector4D(   1.6180339887,    0.0000000000,   -0.6180339887,   -2.2360679775), 
Vector4D(  -0.6180339887,   -1.6180339887,    0.0000000000,   -2.2360679775), 
Vector4D(   0.6180339887,   -1.6180339887,    0.0000000000,   -2.2360679775), 
Vector4D(  -0.6180339887,    1.6180339887,    0.0000000000,   -2.2360679775), 
Vector4D(   0.6180339887,    1.6180339887,    0.0000000000,   -2.2360679775), 
Vector4D(  -1.6180339887,    0.0000000000,    0.6180339887,   -2.2360679775), 
Vector4D(   1.6180339887,    0.0000000000,    0.6180339887,   -2.2360679775), 
Vector4D(  -1.0000000000,   -1.0000000000,    1.0000000000,   -2.2360679775), 
Vector4D(   1.0000000000,   -1.0000000000,    1.0000000000,   -2.2360679775), 
Vector4D(  -1.0000000000,    1.0000000000,    1.0000000000,   -2.2360679775), 
Vector4D(   1.0000000000,    1.0000000000,    1.0000000000,   -2.2360679775), 
Vector4D(   0.0000000000,   -0.6180339887,    1.6180339887,   -2.2360679775), 
Vector4D(   0.0000000000,    0.6180339887,    1.6180339887,   -2.2360679775), 
Vector4D(   0.0000000000,    0.0000000000,   -2.0000000000,   -2.0000000000), 
Vector4D(  -0.6180339887,   -1.0000000000,   -1.6180339887,   -2.0000000000), 
Vector4D(   0.6180339887,   -1.0000000000,   -1.6180339887,   -2.0000000000), 
Vector4D(  -0.6180339887,    1.0000000000,   -1.6180339887,   -2.0000000000), 
Vector4D(   0.6180339887,    1.0000000000,   -1.6180339887,   -2.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,   -1.0000000000,   -2.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,   -1.0000000000,   -2.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,   -1.0000000000,   -2.0000000000),
Vector4D(   1.6180339887,    0.6180339887,   -1.0000000000,   -2.0000000000), 
Vector4D(  -1.0000000000,   -1.6180339887,   -0.6180339887,   -2.0000000000),
Vector4D(   1.0000000000,   -1.6180339887,   -0.6180339887,   -2.0000000000), 
Vector4D(  -1.0000000000,    1.6180339887,   -0.6180339887,   -2.0000000000), 
Vector4D(   1.0000000000,    1.6180339887,   -0.6180339887,   -2.0000000000), 
Vector4D(   0.0000000000,   -2.0000000000,    0.0000000000,   -2.0000000000), 
Vector4D(  -2.0000000000,    0.0000000000,    0.0000000000,   -2.0000000000), 
Vector4D(   2.0000000000,    0.0000000000,    0.0000000000,   -2.0000000000), 
Vector4D(   0.0000000000,    2.0000000000,    0.0000000000,   -2.0000000000), 
Vector4D(  -1.0000000000,   -1.6180339887,    0.6180339887,   -2.0000000000), 
Vector4D(   1.0000000000,   -1.6180339887,    0.6180339887,   -2.0000000000), 
Vector4D(  -1.0000000000,    1.6180339887,    0.6180339887,   -2.0000000000), 
Vector4D(   1.0000000000,    1.6180339887,    0.6180339887,   -2.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,    1.0000000000,   -2.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,    1.0000000000,   -2.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,    1.0000000000,   -2.0000000000), 
Vector4D(   1.6180339887,    0.6180339887,    1.0000000000,   -2.0000000000), 
Vector4D(  -0.6180339887,   -1.0000000000,    1.6180339887,   -2.0000000000), 
Vector4D(   0.6180339887,   -1.0000000000,    1.6180339887,   -2.0000000000), 
Vector4D(  -0.6180339887,    1.0000000000,    1.6180339887,   -2.0000000000), 
Vector4D(   0.6180339887,    1.0000000000,    1.6180339887,   -2.0000000000), 
Vector4D(   0.0000000000,    0.0000000000,    2.0000000000,   -2.0000000000), 
Vector4D(  -0.6180339887,    0.0000000000,   -2.2360679775,   -1.6180339887), 
Vector4D(   0.6180339887,    0.0000000000,   -2.2360679775,   -1.6180339887), 
Vector4D(  -1.0000000000,   -0.6180339887,   -2.0000000000,   -1.6180339887), 
Vector4D(   1.0000000000,   -0.6180339887,   -2.0000000000,   -1.6180339887), 
Vector4D(  -1.0000000000,    0.6180339887,   -2.0000000000,   -1.6180339887), 
Vector4D(   1.0000000000,    0.6180339887,   -2.0000000000,   -1.6180339887), 
Vector4D(  -0.3819660113,   -1.6180339887,   -1.6180339887,   -1.6180339887), 
Vector4D(   0.3819660113,   -1.6180339887,   -1.6180339887,   -1.6180339887), 
Vector4D(  -1.6180339887,   -0.3819660113,   -1.6180339887,   -1.6180339887), 
Vector4D(   1.6180339887,   -0.3819660113,   -1.6180339887,   -1.6180339887), 
Vector4D(  -1.6180339887,    0.3819660113,   -1.6180339887,   -1.6180339887), 
Vector4D(   1.6180339887,    0.3819660113,   -1.6180339887,   -1.6180339887), 
Vector4D(  -0.3819660113,    1.6180339887,   -1.6180339887,   -1.6180339887), 
Vector4D(   0.3819660113,    1.6180339887,   -1.6180339887,   -1.6180339887), 
Vector4D(  -0.6180339887,   -2.0000000000,   -1.0000000000,   -1.6180339887), 
Vector4D(   0.6180339887,   -2.0000000000,   -1.0000000000,   -1.6180339887), 
Vector4D(  -0.6180339887,    2.0000000000,   -1.0000000000,   -1.6180339887), 
Vector4D(   0.6180339887,    2.0000000000,   -1.0000000000,   -1.6180339887), 
Vector4D(   0.0000000000,   -2.2360679775,   -0.6180339887,   -1.6180339887), 
Vector4D(  -2.0000000000,   -1.0000000000,   -0.6180339887,   -1.6180339887), 
Vector4D(   2.0000000000,   -1.0000000000,   -0.6180339887,   -1.6180339887), 
Vector4D(  -2.0000000000,    1.0000000000,   -0.6180339887,   -1.6180339887), 
Vector4D(   2.0000000000,    1.0000000000,   -0.6180339887,   -1.6180339887), 
Vector4D(   0.0000000000,    2.2360679775,   -0.6180339887,   -1.6180339887), 
Vector4D(  -1.6180339887,   -1.6180339887,   -0.3819660113,   -1.6180339887), 
Vector4D(   1.6180339887,   -1.6180339887,   -0.3819660113,   -1.6180339887), 
Vector4D(  -1.6180339887,    1.6180339887,   -0.3819660113,   -1.6180339887), 
Vector4D(   1.6180339887,    1.6180339887,   -0.3819660113,   -1.6180339887), 
Vector4D(  -2.2360679775,   -0.6180339887,    0.0000000000,   -1.6180339887), 
Vector4D(   2.2360679775,   -0.6180339887,    0.0000000000,   -1.6180339887), 
Vector4D(  -2.2360679775,    0.6180339887,    0.0000000000,   -1.6180339887), 
Vector4D(   2.2360679775,    0.6180339887,    0.0000000000,   -1.6180339887), 
Vector4D(  -1.6180339887,   -1.6180339887,    0.3819660113,   -1.6180339887), 
Vector4D(   1.6180339887,   -1.6180339887,    0.3819660113,   -1.6180339887), 
Vector4D(  -1.6180339887,    1.6180339887,    0.3819660113,   -1.6180339887), 
Vector4D(   1.6180339887,    1.6180339887,    0.3819660113,   -1.6180339887), 
Vector4D(   0.0000000000,   -2.2360679775,    0.6180339887,   -1.6180339887), 
Vector4D(  -2.0000000000,   -1.0000000000,    0.6180339887,   -1.6180339887), 
Vector4D(   2.0000000000,   -1.0000000000,    0.6180339887,   -1.6180339887), 
Vector4D(  -2.0000000000,    1.0000000000,    0.6180339887,   -1.6180339887), 
Vector4D(   2.0000000000,    1.0000000000,    0.6180339887,   -1.6180339887), 
Vector4D(   0.0000000000,    2.2360679775,    0.6180339887,   -1.6180339887), 
Vector4D(  -0.6180339887,   -2.0000000000,    1.0000000000,   -1.6180339887), 
Vector4D(   0.6180339887,   -2.0000000000,    1.0000000000,   -1.6180339887), 
Vector4D(  -0.6180339887,    2.0000000000,    1.0000000000,   -1.6180339887), 
Vector4D(   0.6180339887,    2.0000000000,    1.0000000000,   -1.6180339887), 
Vector4D(  -0.3819660113,   -1.6180339887,    1.6180339887,   -1.6180339887), 
Vector4D(   0.3819660113,   -1.6180339887,    1.6180339887,   -1.6180339887), 
Vector4D(  -1.6180339887,   -0.3819660113,    1.6180339887,   -1.6180339887), 
Vector4D(   1.6180339887,   -0.3819660113,    1.6180339887,   -1.6180339887), 
Vector4D(  -1.6180339887,    0.3819660113,    1.6180339887,   -1.6180339887), 
Vector4D(   1.6180339887,    0.3819660113,    1.6180339887,   -1.6180339887), 
Vector4D(  -0.3819660113,    1.6180339887,    1.6180339887,   -1.6180339887), 
Vector4D(   0.3819660113,    1.6180339887,    1.6180339887,   -1.6180339887), 
Vector4D(  -1.0000000000,   -0.6180339887,    2.0000000000,   -1.6180339887), 
Vector4D(   1.0000000000,   -0.6180339887,    2.0000000000,   -1.6180339887), 
Vector4D(  -1.0000000000,    0.6180339887,    2.0000000000,   -1.6180339887), 
Vector4D(   1.0000000000,    0.6180339887,    2.0000000000,   -1.6180339887), 
Vector4D(  -0.6180339887,    0.0000000000,    2.2360679775,   -1.6180339887), 
Vector4D(   0.6180339887,    0.0000000000,    2.2360679775,   -1.6180339887), 
Vector4D(  -0.3819660113,    0.0000000000,   -2.6180339887,   -1.0000000000), 
Vector4D(   0.3819660113,    0.0000000000,   -2.6180339887,   -1.0000000000), 
Vector4D(  -1.0000000000,   -1.0000000000,   -2.2360679775,   -1.0000000000), 
Vector4D(   1.0000000000,   -1.0000000000,   -2.2360679775,   -1.0000000000), 
Vector4D(  -1.0000000000,    1.0000000000,   -2.2360679775,   -1.0000000000), 
Vector4D(   1.0000000000,    1.0000000000,   -2.2360679775,   -1.0000000000), 
Vector4D(  -0.6180339887,   -1.6180339887,   -2.0000000000,   -1.0000000000), 
Vector4D(   0.6180339887,   -1.6180339887,   -2.0000000000,   -1.0000000000), 
Vector4D(  -0.6180339887,    1.6180339887,   -2.0000000000,   -1.0000000000), 
Vector4D(   0.6180339887,    1.6180339887,   -2.0000000000,   -1.0000000000), 
Vector4D(  -2.0000000000,   -0.6180339887,   -1.6180339887,   -1.0000000000), 
Vector4D(   2.0000000000,   -0.6180339887,   -1.6180339887,   -1.0000000000), 
Vector4D(  -2.0000000000,    0.6180339887,   -1.6180339887,   -1.0000000000), 
Vector4D(   2.0000000000,    0.6180339887,   -1.6180339887,   -1.0000000000), 
Vector4D(  -1.0000000000,   -2.2360679775,   -1.0000000000,   -1.0000000000), 
Vector4D(   1.0000000000,   -2.2360679775,   -1.0000000000,   -1.0000000000), 
Vector4D(  -2.2360679775,   -1.0000000000,   -1.0000000000,   -1.0000000000), 
Vector4D(   2.2360679775,   -1.0000000000,   -1.0000000000,   -1.0000000000), 
Vector4D(  -2.2360679775,    1.0000000000,   -1.0000000000,   -1.0000000000), 
Vector4D(   2.2360679775,    1.0000000000,   -1.0000000000,   -1.0000000000), 
Vector4D(  -1.0000000000,    2.2360679775,   -1.0000000000,   -1.0000000000), 
Vector4D(   1.0000000000,    2.2360679775,   -1.0000000000,   -1.0000000000), 
Vector4D(  -1.6180339887,   -2.0000000000,   -0.6180339887,   -1.0000000000), 
Vector4D(   1.6180339887,   -2.0000000000,   -0.6180339887,   -1.0000000000),
Vector4D(  -1.6180339887,    2.0000000000,   -0.6180339887,   -1.0000000000), 
Vector4D(   1.6180339887,    2.0000000000,   -0.6180339887,   -1.0000000000), 
Vector4D(   0.0000000000,   -2.6180339887,   -0.3819660113,   -1.0000000000), 
Vector4D(   0.0000000000,    2.6180339887,   -0.3819660113,   -1.0000000000), 
Vector4D(  -2.6180339887,   -0.3819660113,    0.0000000000,   -1.0000000000), 
Vector4D(   2.6180339887,   -0.3819660113,    0.0000000000,   -1.0000000000), 
Vector4D(  -2.6180339887,    0.3819660113,    0.0000000000,   -1.0000000000), 
Vector4D(   2.6180339887,    0.3819660113,    0.0000000000,   -1.0000000000), 
Vector4D(   0.0000000000,   -2.6180339887,    0.3819660113,   -1.0000000000), 
Vector4D(   0.0000000000,    2.6180339887,    0.3819660113,   -1.0000000000), 
Vector4D(  -1.6180339887,   -2.0000000000,    0.6180339887,   -1.0000000000), 
Vector4D(   1.6180339887,   -2.0000000000,    0.6180339887,   -1.0000000000), 
Vector4D(  -1.6180339887,    2.0000000000,    0.6180339887,   -1.0000000000), 
Vector4D(   1.6180339887,    2.0000000000,    0.6180339887,   -1.0000000000), 
Vector4D(  -1.0000000000,   -2.2360679775,    1.0000000000,   -1.0000000000), 
Vector4D(   1.0000000000,   -2.2360679775,    1.0000000000,   -1.0000000000), 
Vector4D(  -2.2360679775,   -1.0000000000,    1.0000000000,   -1.0000000000), 
Vector4D(   2.2360679775,   -1.0000000000,    1.0000000000,   -1.0000000000), 
Vector4D(  -2.2360679775,    1.0000000000,    1.0000000000,   -1.0000000000), 
Vector4D(   2.2360679775,    1.0000000000,    1.0000000000,   -1.0000000000), 
Vector4D(  -1.0000000000,    2.2360679775,    1.0000000000,   -1.0000000000), 
Vector4D(   1.0000000000,    2.2360679775,    1.0000000000,   -1.0000000000), 
Vector4D(  -2.0000000000,   -0.6180339887,    1.6180339887,   -1.0000000000), 
Vector4D(   2.0000000000,   -0.6180339887,    1.6180339887,   -1.0000000000), 
Vector4D(  -2.0000000000,    0.6180339887,    1.6180339887,   -1.0000000000), 
Vector4D(   2.0000000000,    0.6180339887,    1.6180339887,   -1.0000000000), 
Vector4D(  -0.6180339887,   -1.6180339887,    2.0000000000,   -1.0000000000),
Vector4D(   0.6180339887,   -1.6180339887,    2.0000000000,   -1.0000000000), 
Vector4D(  -0.6180339887,    1.6180339887,    2.0000000000,   -1.0000000000), 
Vector4D(   0.6180339887,    1.6180339887,    2.0000000000,   -1.0000000000), 
Vector4D(  -1.0000000000,   -1.0000000000,    2.2360679775,   -1.0000000000), 
Vector4D(   1.0000000000,   -1.0000000000,    2.2360679775,   -1.0000000000), 
Vector4D(  -1.0000000000,    1.0000000000,    2.2360679775,   -1.0000000000), 
Vector4D(   1.0000000000,    1.0000000000,    2.2360679775,   -1.0000000000), 
Vector4D(  -0.3819660113,    0.0000000000,    2.6180339887,   -1.0000000000), 
Vector4D(   0.3819660113,    0.0000000000,    2.6180339887,   -1.0000000000), 
Vector4D(  -0.6180339887,   -0.6180339887,   -2.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,   -2.6180339887,   -0.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,   -2.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,   -2.6180339887,   -0.6180339887), 
Vector4D(   0.0000000000,   -1.6180339887,   -2.2360679775,   -0.6180339887), 
Vector4D(   0.0000000000,    1.6180339887,   -2.2360679775,   -0.6180339887), 
Vector4D(  -1.6180339887,   -1.0000000000,   -2.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,   -1.0000000000,   -2.0000000000,   -0.6180339887), 
Vector4D(  -1.6180339887,    1.0000000000,   -2.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,    1.0000000000,   -2.0000000000,   -0.6180339887), 
Vector4D(  -1.0000000000,   -2.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(   1.0000000000,   -2.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(  -2.2360679775,    0.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(   2.2360679775,    0.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(  -1.0000000000,    2.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(   1.0000000000,    2.0000000000,   -1.6180339887,   -0.6180339887), 
Vector4D(  -2.0000000000,   -1.6180339887,   -1.0000000000,   -0.6180339887), 
Vector4D(   2.0000000000,   -1.6180339887,   -1.0000000000,   -0.6180339887), 
Vector4D(  -2.0000000000,    1.6180339887,   -1.0000000000,   -0.6180339887), 
Vector4D(   2.0000000000,    1.6180339887,   -1.0000000000,   -0.6180339887), 
Vector4D(  -0.6180339887,   -2.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,   -2.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(  -2.6180339887,   -0.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(   2.6180339887,   -0.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(  -2.6180339887,    0.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(   2.6180339887,    0.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(  -0.6180339887,    2.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,    2.6180339887,   -0.6180339887,   -0.6180339887), 
Vector4D(  -1.6180339887,   -2.2360679775,    0.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,   -2.2360679775,    0.0000000000,   -0.6180339887), 
Vector4D(  -1.6180339887,    2.2360679775,    0.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,    2.2360679775,    0.0000000000,   -0.6180339887), 
Vector4D(  -0.6180339887,   -2.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,   -2.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(  -2.6180339887,   -0.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(   2.6180339887,   -0.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(  -2.6180339887,    0.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(   2.6180339887,    0.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(  -0.6180339887,    2.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,    2.6180339887,    0.6180339887,   -0.6180339887), 
Vector4D(  -2.0000000000,   -1.6180339887,    1.0000000000,   -0.6180339887), 
Vector4D(   2.0000000000,   -1.6180339887,    1.0000000000,   -0.6180339887), 
Vector4D(  -2.0000000000,    1.6180339887,    1.0000000000,   -0.6180339887), 
Vector4D(   2.0000000000,    1.6180339887,    1.0000000000,   -0.6180339887), 
Vector4D(  -1.0000000000,   -2.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(   1.0000000000,   -2.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(  -2.2360679775,    0.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(   2.2360679775,    0.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(  -1.0000000000,    2.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(   1.0000000000,    2.0000000000,    1.6180339887,   -0.6180339887), 
Vector4D(  -1.6180339887,   -1.0000000000,    2.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,   -1.0000000000,    2.0000000000,   -0.6180339887), 
Vector4D(  -1.6180339887,    1.0000000000,    2.0000000000,   -0.6180339887), 
Vector4D(   1.6180339887,    1.0000000000,    2.0000000000,   -0.6180339887), 
Vector4D(   0.0000000000,   -1.6180339887,    2.2360679775,   -0.6180339887), 
Vector4D(   0.0000000000,    1.6180339887,    2.2360679775,   -0.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,    2.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,    2.6180339887,   -0.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,    2.6180339887,   -0.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,    2.6180339887,   -0.6180339887), 
Vector4D(   0.0000000000,   -1.0000000000,   -2.6180339887,   -0.3819660113), 
Vector4D(   0.0000000000,    1.0000000000,   -2.6180339887,   -0.3819660113), 
Vector4D(  -1.6180339887,   -1.6180339887,   -1.6180339887,   -0.3819660113),
Vector4D(   1.6180339887,   -1.6180339887,   -1.6180339887,   -0.3819660113), 
Vector4D(  -1.6180339887,    1.6180339887,   -1.6180339887,   -0.3819660113), 
Vector4D(   1.6180339887,    1.6180339887,   -1.6180339887,   -0.3819660113), 
Vector4D(  -2.6180339887,    0.0000000000,   -1.0000000000,   -0.3819660113), 
Vector4D(   2.6180339887,    0.0000000000,   -1.0000000000,   -0.3819660113), 
Vector4D(  -1.0000000000,   -2.6180339887,    0.0000000000,   -0.3819660113), 
Vector4D(   1.0000000000,   -2.6180339887,    0.0000000000,   -0.3819660113), 
Vector4D(  -1.0000000000,    2.6180339887,    0.0000000000,   -0.3819660113), 
Vector4D(   1.0000000000,    2.6180339887,    0.0000000000,   -0.3819660113), 
Vector4D(  -2.6180339887,    0.0000000000,    1.0000000000,   -0.3819660113), 
Vector4D(   2.6180339887,    0.0000000000,    1.0000000000,   -0.3819660113), 
Vector4D(  -1.6180339887,   -1.6180339887,    1.6180339887,   -0.3819660113), 
Vector4D(   1.6180339887,   -1.6180339887,    1.6180339887,   -0.3819660113), 
Vector4D(  -1.6180339887,    1.6180339887,    1.6180339887,   -0.3819660113), 
Vector4D(   1.6180339887,    1.6180339887,    1.6180339887,   -0.3819660113), 
Vector4D(   0.0000000000,   -1.0000000000,    2.6180339887,   -0.3819660113), 
Vector4D(   0.0000000000,    1.0000000000,    2.6180339887,   -0.3819660113), 
Vector4D(  -1.0000000000,   -0.3819660113,   -2.6180339887,    0.0000000000), 
Vector4D(   1.0000000000,   -0.3819660113,   -2.6180339887,    0.0000000000), 
Vector4D(  -1.0000000000,    0.3819660113,   -2.6180339887,    0.0000000000), 
Vector4D(   1.0000000000,    0.3819660113,   -2.6180339887,    0.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,   -2.2360679775,    0.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,   -2.2360679775,    0.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,   -2.2360679775,    0.0000000000), 
Vector4D(   1.6180339887,    0.6180339887,   -2.2360679775,    0.0000000000), 
Vector4D(   0.0000000000,   -2.0000000000,   -2.0000000000,    0.0000000000), 
Vector4D(  -2.0000000000,    0.0000000000,   -2.0000000000,    0.0000000000), 
Vector4D(   2.0000000000,    0.0000000000,   -2.0000000000,    0.0000000000), 
Vector4D(   0.0000000000,    2.0000000000,   -2.0000000000,    0.0000000000), 
Vector4D(  -0.6180339887,   -2.2360679775,   -1.6180339887,    0.0000000000), 
Vector4D(   0.6180339887,   -2.2360679775,   -1.6180339887,    0.0000000000), 
Vector4D(  -0.6180339887,    2.2360679775,   -1.6180339887,    0.0000000000), 
Vector4D(   0.6180339887,    2.2360679775,   -1.6180339887,    0.0000000000), 
Vector4D(  -0.3819660113,   -2.6180339887,   -1.0000000000,    0.0000000000), 
Vector4D(   0.3819660113,   -2.6180339887,   -1.0000000000,    0.0000000000), 
Vector4D(  -0.3819660113,    2.6180339887,   -1.0000000000,    0.0000000000), 
Vector4D(   0.3819660113,    2.6180339887,   -1.0000000000,    0.0000000000), 
Vector4D(  -2.2360679775,   -1.6180339887,   -0.6180339887,    0.0000000000), 
Vector4D(   2.2360679775,   -1.6180339887,   -0.6180339887,    0.0000000000), 
Vector4D(  -2.2360679775,    1.6180339887,   -0.6180339887,    0.0000000000), 
Vector4D(   2.2360679775,    1.6180339887,   -0.6180339887,    0.0000000000), 
Vector4D(  -2.6180339887,   -1.0000000000,   -0.3819660113,    0.0000000000), 
Vector4D(   2.6180339887,   -1.0000000000,   -0.3819660113,    0.0000000000),
Vector4D(  -2.6180339887,    1.0000000000,   -0.3819660113,    0.0000000000), 
Vector4D(   2.6180339887,    1.0000000000,   -0.3819660113,    0.0000000000), 
Vector4D(  -2.0000000000,   -2.0000000000,    0.0000000000,    0.0000000000), 
Vector4D(   2.0000000000,   -2.0000000000,    0.0000000000,    0.0000000000), 
Vector4D(  -2.0000000000,    2.0000000000,    0.0000000000,    0.0000000000), 
Vector4D(   2.0000000000,    2.0000000000,    0.0000000000,    0.0000000000), 
Vector4D(  -2.6180339887,   -1.0000000000,    0.3819660113,    0.0000000000), 
Vector4D(   2.6180339887,   -1.0000000000,    0.3819660113,    0.0000000000), 
Vector4D(  -2.6180339887,    1.0000000000,    0.3819660113,    0.0000000000), 
Vector4D(   2.6180339887,    1.0000000000,    0.3819660113,    0.0000000000), 
Vector4D(  -2.2360679775,   -1.6180339887,    0.6180339887,    0.0000000000), 
Vector4D(   2.2360679775,   -1.6180339887,    0.6180339887,    0.0000000000), 
Vector4D(  -2.2360679775,    1.6180339887,    0.6180339887,    0.0000000000), 
Vector4D(   2.2360679775,    1.6180339887,    0.6180339887,    0.0000000000), 
Vector4D(  -0.3819660113,   -2.6180339887,    1.0000000000,    0.0000000000), 
Vector4D(   0.3819660113,   -2.6180339887,    1.0000000000,    0.0000000000), 
Vector4D(  -0.3819660113,    2.6180339887,    1.0000000000,    0.0000000000), 
Vector4D(   0.3819660113,    2.6180339887,    1.0000000000,    0.0000000000), 
Vector4D(  -0.6180339887,   -2.2360679775,    1.6180339887,    0.0000000000), 
Vector4D(   0.6180339887,   -2.2360679775,    1.6180339887,    0.0000000000), 
Vector4D(  -0.6180339887,    2.2360679775,    1.6180339887,    0.0000000000), 
Vector4D(   0.6180339887,    2.2360679775,    1.6180339887,    0.0000000000), 
Vector4D(   0.0000000000,   -2.0000000000,    2.0000000000,    0.0000000000), 
Vector4D(  -2.0000000000,    0.0000000000,    2.0000000000,    0.0000000000), 
Vector4D(   2.0000000000,    0.0000000000,    2.0000000000,    0.0000000000), 
Vector4D(   0.0000000000,    2.0000000000,    2.0000000000,    0.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,    2.2360679775,    0.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,    2.2360679775,    0.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,    2.2360679775,    0.0000000000), 
Vector4D(   1.6180339887,    0.6180339887,    2.2360679775,    0.0000000000), 
Vector4D(  -1.0000000000,   -0.3819660113,    2.6180339887,    0.0000000000), 
Vector4D(   1.0000000000,   -0.3819660113,    2.6180339887,    0.0000000000), 
Vector4D(  -1.0000000000,    0.3819660113,    2.6180339887,    0.0000000000), 
Vector4D(   1.0000000000,    0.3819660113,    2.6180339887,    0.0000000000), 
Vector4D(   0.0000000000,   -1.0000000000,   -2.6180339887,    0.3819660113), 
Vector4D(   0.0000000000,    1.0000000000,   -2.6180339887,    0.3819660113), 
Vector4D(  -1.6180339887,   -1.6180339887,   -1.6180339887,    0.3819660113), 
Vector4D(   1.6180339887,   -1.6180339887,   -1.6180339887,    0.3819660113), 
Vector4D(  -1.6180339887,    1.6180339887,   -1.6180339887,    0.3819660113), 
Vector4D(   1.6180339887,    1.6180339887,   -1.6180339887,    0.3819660113), 
Vector4D(  -2.6180339887,    0.0000000000,   -1.0000000000,    0.3819660113), 
Vector4D(   2.6180339887,    0.0000000000,   -1.0000000000,    0.3819660113), 
Vector4D(  -1.0000000000,   -2.6180339887,    0.0000000000,    0.3819660113), 
Vector4D(   1.0000000000,   -2.6180339887,    0.0000000000,    0.3819660113), 
Vector4D(  -1.0000000000,    2.6180339887,    0.0000000000,    0.3819660113), 
Vector4D(   1.0000000000,    2.6180339887,    0.0000000000,    0.3819660113), 
Vector4D(  -2.6180339887,    0.0000000000,    1.0000000000,    0.3819660113), 
Vector4D(   2.6180339887,    0.0000000000,    1.0000000000,    0.3819660113), 
Vector4D(  -1.6180339887,   -1.6180339887,    1.6180339887,    0.3819660113), 
Vector4D(   1.6180339887,   -1.6180339887,    1.6180339887,    0.3819660113), 
Vector4D(  -1.6180339887,    1.6180339887,    1.6180339887,    0.3819660113), 
Vector4D(   1.6180339887,    1.6180339887,    1.6180339887,    0.3819660113), 
Vector4D(   0.0000000000,   -1.0000000000,    2.6180339887,    0.3819660113), 
Vector4D(   0.0000000000,    1.0000000000,    2.6180339887,    0.3819660113), 
Vector4D(  -0.6180339887,   -0.6180339887,   -2.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,   -2.6180339887,    0.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,   -2.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,   -2.6180339887,    0.6180339887), 
Vector4D(   0.0000000000,   -1.6180339887,   -2.2360679775,    0.6180339887), 
Vector4D(   0.0000000000,    1.6180339887,   -2.2360679775,    0.6180339887), 
Vector4D(  -1.6180339887,   -1.0000000000,   -2.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,   -1.0000000000,   -2.0000000000,    0.6180339887), 
Vector4D(  -1.6180339887,    1.0000000000,   -2.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,    1.0000000000,   -2.0000000000,    0.6180339887), 
Vector4D(  -1.0000000000,   -2.0000000000,   -1.6180339887,    0.6180339887), 
Vector4D(   1.0000000000,   -2.0000000000,   -1.6180339887,    0.6180339887), 
Vector4D(  -2.2360679775,    0.0000000000,   -1.6180339887,    0.6180339887),
Vector4D(   2.2360679775,    0.0000000000,   -1.6180339887,    0.6180339887), 
Vector4D(  -1.0000000000,    2.0000000000,   -1.6180339887,    0.6180339887), 
Vector4D(   1.0000000000,    2.0000000000,   -1.6180339887,    0.6180339887), 
Vector4D(  -2.0000000000,   -1.6180339887,   -1.0000000000,    0.6180339887), 
Vector4D(   2.0000000000,   -1.6180339887,   -1.0000000000,    0.6180339887),
Vector4D(  -2.0000000000,    1.6180339887,   -1.0000000000,    0.6180339887), 
Vector4D(   2.0000000000,    1.6180339887,   -1.0000000000,    0.6180339887), 
Vector4D(  -0.6180339887,   -2.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,   -2.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(  -2.6180339887,   -0.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(   2.6180339887,   -0.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(  -2.6180339887,    0.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(   2.6180339887,    0.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(  -0.6180339887,    2.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,    2.6180339887,   -0.6180339887,    0.6180339887), 
Vector4D(  -1.6180339887,   -2.2360679775,    0.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,   -2.2360679775,    0.0000000000,    0.6180339887), 
Vector4D(  -1.6180339887,    2.2360679775,    0.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,    2.2360679775,    0.0000000000,    0.6180339887), 
Vector4D(  -0.6180339887,   -2.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,   -2.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(  -2.6180339887,   -0.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(   2.6180339887,   -0.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(  -2.6180339887,    0.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(   2.6180339887,    0.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(  -0.6180339887,    2.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,    2.6180339887,    0.6180339887,    0.6180339887), 
Vector4D(  -2.0000000000,   -1.6180339887,    1.0000000000,    0.6180339887), 
Vector4D(   2.0000000000,   -1.6180339887,    1.0000000000,    0.6180339887),
Vector4D(  -2.0000000000,    1.6180339887,    1.0000000000,    0.6180339887), 
Vector4D(   2.0000000000,    1.6180339887,    1.0000000000,    0.6180339887), 
Vector4D(  -1.0000000000,   -2.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(   1.0000000000,   -2.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(  -2.2360679775,    0.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(   2.2360679775,    0.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(  -1.0000000000,    2.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(   1.0000000000,    2.0000000000,    1.6180339887,    0.6180339887), 
Vector4D(  -1.6180339887,   -1.0000000000,    2.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,   -1.0000000000,    2.0000000000,    0.6180339887), 
Vector4D(  -1.6180339887,    1.0000000000,    2.0000000000,    0.6180339887), 
Vector4D(   1.6180339887,    1.0000000000,    2.0000000000,    0.6180339887), 
Vector4D(   0.0000000000,   -1.6180339887,    2.2360679775,    0.6180339887), 
Vector4D(   0.0000000000,    1.6180339887,    2.2360679775,    0.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,    2.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,    2.6180339887,    0.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,    2.6180339887,    0.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,    2.6180339887,    0.6180339887), 
Vector4D(  -0.3819660113,    0.0000000000,   -2.6180339887,    1.0000000000), 
Vector4D(   0.3819660113,    0.0000000000,   -2.6180339887,    1.0000000000), 
Vector4D(  -1.0000000000,   -1.0000000000,   -2.2360679775,    1.0000000000), 
Vector4D(   1.0000000000,   -1.0000000000,   -2.2360679775,    1.0000000000), 
Vector4D(  -1.0000000000,    1.0000000000,   -2.2360679775,    1.0000000000), 
Vector4D(   1.0000000000,    1.0000000000,   -2.2360679775,    1.0000000000), 
Vector4D(  -0.6180339887,   -1.6180339887,   -2.0000000000,    1.0000000000), 
Vector4D(   0.6180339887,   -1.6180339887,   -2.0000000000,    1.0000000000), 
Vector4D(  -0.6180339887,    1.6180339887,   -2.0000000000,    1.0000000000), 
Vector4D(   0.6180339887,    1.6180339887,   -2.0000000000,    1.0000000000),
Vector4D(  -2.0000000000,   -0.6180339887,   -1.6180339887,    1.0000000000), 
Vector4D(   2.0000000000,   -0.6180339887,   -1.6180339887,    1.0000000000), 
Vector4D(  -2.0000000000,    0.6180339887,   -1.6180339887,    1.0000000000), 
Vector4D(   2.0000000000,    0.6180339887,   -1.6180339887,    1.0000000000), 
Vector4D(  -1.0000000000,   -2.2360679775,   -1.0000000000,    1.0000000000), 
Vector4D(   1.0000000000,   -2.2360679775,   -1.0000000000,    1.0000000000), 
Vector4D(  -2.2360679775,   -1.0000000000,   -1.0000000000,    1.0000000000), 
Vector4D(   2.2360679775,   -1.0000000000,   -1.0000000000,    1.0000000000), 
Vector4D(  -2.2360679775,    1.0000000000,   -1.0000000000,    1.0000000000), 
Vector4D(   2.2360679775,    1.0000000000,   -1.0000000000,    1.0000000000), 
Vector4D(  -1.0000000000,    2.2360679775,   -1.0000000000,    1.0000000000), 
Vector4D(   1.0000000000,    2.2360679775,   -1.0000000000,    1.0000000000), 
Vector4D(  -1.6180339887,   -2.0000000000,   -0.6180339887,    1.0000000000),
Vector4D(   1.6180339887,   -2.0000000000,   -0.6180339887,    1.0000000000), 
Vector4D(  -1.6180339887,    2.0000000000,   -0.6180339887,    1.0000000000), 
Vector4D(   1.6180339887,    2.0000000000,   -0.6180339887,    1.0000000000), 
Vector4D(   0.0000000000,   -2.6180339887,   -0.3819660113,    1.0000000000), 
Vector4D(   0.0000000000,    2.6180339887,   -0.3819660113,    1.0000000000),
Vector4D(  -2.6180339887,   -0.3819660113,    0.0000000000,    1.0000000000), 
Vector4D(   2.6180339887,   -0.3819660113,    0.0000000000,    1.0000000000), 
Vector4D(  -2.6180339887,    0.3819660113,    0.0000000000,    1.0000000000), 
Vector4D(   2.6180339887,    0.3819660113,    0.0000000000,    1.0000000000), 
Vector4D(   0.0000000000,   -2.6180339887,    0.3819660113,    1.0000000000), 
Vector4D(   0.0000000000,    2.6180339887,    0.3819660113,    1.0000000000), 
Vector4D(  -1.6180339887,   -2.0000000000,    0.6180339887,    1.0000000000), 
Vector4D(   1.6180339887,   -2.0000000000,    0.6180339887,    1.0000000000), 
Vector4D(  -1.6180339887,    2.0000000000,    0.6180339887,    1.0000000000), 
Vector4D(   1.6180339887,    2.0000000000,    0.6180339887,    1.0000000000), 
Vector4D(  -1.0000000000,   -2.2360679775,    1.0000000000,    1.0000000000), 
Vector4D(   1.0000000000,   -2.2360679775,    1.0000000000,    1.0000000000), 
Vector4D(  -2.2360679775,   -1.0000000000,    1.0000000000,    1.0000000000), 
Vector4D(   2.2360679775,   -1.0000000000,    1.0000000000,    1.0000000000), 
Vector4D(  -2.2360679775,    1.0000000000,    1.0000000000,    1.0000000000), 
Vector4D(   2.2360679775,    1.0000000000,    1.0000000000,    1.0000000000), 
Vector4D(  -1.0000000000,    2.2360679775,    1.0000000000,    1.0000000000), 
Vector4D(   1.0000000000,    2.2360679775,    1.0000000000,    1.0000000000), 
Vector4D(  -2.0000000000,   -0.6180339887,    1.6180339887,    1.0000000000), 
Vector4D(   2.0000000000,   -0.6180339887,    1.6180339887,    1.0000000000), 
Vector4D(  -2.0000000000,    0.6180339887,    1.6180339887,    1.0000000000), 
Vector4D(   2.0000000000,    0.6180339887,    1.6180339887,    1.0000000000), 
Vector4D(  -0.6180339887,   -1.6180339887,    2.0000000000,    1.0000000000), 
Vector4D(   0.6180339887,   -1.6180339887,    2.0000000000,    1.0000000000), 
Vector4D(  -0.6180339887,    1.6180339887,    2.0000000000,    1.0000000000), 
Vector4D(   0.6180339887,    1.6180339887,    2.0000000000,    1.0000000000),
Vector4D(  -1.0000000000,   -1.0000000000,    2.2360679775,    1.0000000000), 
Vector4D(   1.0000000000,   -1.0000000000,    2.2360679775,    1.0000000000), 
Vector4D(  -1.0000000000,    1.0000000000,    2.2360679775,    1.0000000000), 
Vector4D(   1.0000000000,    1.0000000000,    2.2360679775,    1.0000000000), 
Vector4D(  -0.3819660113,    0.0000000000,    2.6180339887,    1.0000000000), 
Vector4D(   0.3819660113,    0.0000000000,    2.6180339887,    1.0000000000), 
Vector4D(  -0.6180339887,    0.0000000000,   -2.2360679775,    1.6180339887), 
Vector4D(   0.6180339887,    0.0000000000,   -2.2360679775,    1.6180339887), 
Vector4D(  -1.0000000000,   -0.6180339887,   -2.0000000000,    1.6180339887), 
Vector4D(   1.0000000000,   -0.6180339887,   -2.0000000000,    1.6180339887), 
Vector4D(  -1.0000000000,    0.6180339887,   -2.0000000000,    1.6180339887), 
Vector4D(   1.0000000000,    0.6180339887,   -2.0000000000,    1.6180339887), 
Vector4D(  -0.3819660113,   -1.6180339887,   -1.6180339887,    1.6180339887), 
Vector4D(   0.3819660113,   -1.6180339887,   -1.6180339887,    1.6180339887), 
Vector4D(  -1.6180339887,   -0.3819660113,   -1.6180339887,    1.6180339887), 
Vector4D(   1.6180339887,   -0.3819660113,   -1.6180339887,    1.6180339887), 
Vector4D(  -1.6180339887,    0.3819660113,   -1.6180339887,    1.6180339887), 
Vector4D(   1.6180339887,    0.3819660113,   -1.6180339887,    1.6180339887), 
Vector4D(  -0.3819660113,    1.6180339887,   -1.6180339887,    1.6180339887), 
Vector4D(   0.3819660113,    1.6180339887,   -1.6180339887,    1.6180339887), 
Vector4D(  -0.6180339887,   -2.0000000000,   -1.0000000000,    1.6180339887), 
Vector4D(   0.6180339887,   -2.0000000000,   -1.0000000000,    1.6180339887), 
Vector4D(  -0.6180339887,    2.0000000000,   -1.0000000000,    1.6180339887), 
Vector4D(   0.6180339887,    2.0000000000,   -1.0000000000,    1.6180339887), 
Vector4D(   0.0000000000,   -2.2360679775,   -0.6180339887,    1.6180339887), 
Vector4D(  -2.0000000000,   -1.0000000000,   -0.6180339887,    1.6180339887), 
Vector4D(   2.0000000000,   -1.0000000000,   -0.6180339887,    1.6180339887), 
Vector4D(  -2.0000000000,    1.0000000000,   -0.6180339887,    1.6180339887), 
Vector4D(   2.0000000000,    1.0000000000,   -0.6180339887,    1.6180339887), 
Vector4D(   0.0000000000,    2.2360679775,   -0.6180339887,    1.6180339887), 
Vector4D(  -1.6180339887,   -1.6180339887,   -0.3819660113,    1.6180339887), 
Vector4D(   1.6180339887,   -1.6180339887,   -0.3819660113,    1.6180339887), 
Vector4D(  -1.6180339887,    1.6180339887,   -0.3819660113,    1.6180339887), 
Vector4D(   1.6180339887,    1.6180339887,   -0.3819660113,    1.6180339887), 
Vector4D(  -2.2360679775,   -0.6180339887,    0.0000000000,    1.6180339887), 
Vector4D(   2.2360679775,   -0.6180339887,    0.0000000000,    1.6180339887), 
Vector4D(  -2.2360679775,    0.6180339887,    0.0000000000,    1.6180339887), 
Vector4D(   2.2360679775,    0.6180339887,    0.0000000000,    1.6180339887), 
Vector4D(  -1.6180339887,   -1.6180339887,    0.3819660113,    1.6180339887), 
Vector4D(   1.6180339887,   -1.6180339887,    0.3819660113,    1.6180339887),
Vector4D(  -1.6180339887,    1.6180339887,    0.3819660113,    1.6180339887), 
Vector4D(   1.6180339887,    1.6180339887,    0.3819660113,    1.6180339887), 
Vector4D(   0.0000000000,   -2.2360679775,    0.6180339887,    1.6180339887), 
Vector4D(  -2.0000000000,   -1.0000000000,    0.6180339887,    1.6180339887), 
Vector4D(   2.0000000000,   -1.0000000000,    0.6180339887,    1.6180339887), 
Vector4D(  -2.0000000000,    1.0000000000,    0.6180339887,    1.6180339887), 
Vector4D(   2.0000000000,    1.0000000000,    0.6180339887,    1.6180339887), 
Vector4D(   0.0000000000,    2.2360679775,    0.6180339887,    1.6180339887), 
Vector4D(  -0.6180339887,   -2.0000000000,    1.0000000000,    1.6180339887), 
Vector4D(   0.6180339887,   -2.0000000000,    1.0000000000,    1.6180339887), 
Vector4D(  -0.6180339887,    2.0000000000,    1.0000000000,    1.6180339887), 
Vector4D(   0.6180339887,    2.0000000000,    1.0000000000,    1.6180339887), 
Vector4D(  -0.3819660113,   -1.6180339887,    1.6180339887,    1.6180339887), 
Vector4D(   0.3819660113,   -1.6180339887,    1.6180339887,    1.6180339887), 
Vector4D(  -1.6180339887,   -0.3819660113,    1.6180339887,    1.6180339887), 
Vector4D(   1.6180339887,   -0.3819660113,    1.6180339887,    1.6180339887), 
Vector4D(  -1.6180339887,    0.3819660113,    1.6180339887,    1.6180339887), 
Vector4D(   1.6180339887,    0.3819660113,    1.6180339887,    1.6180339887), 
Vector4D(  -0.3819660113,    1.6180339887,    1.6180339887,    1.6180339887), 
Vector4D(   0.3819660113,    1.6180339887,    1.6180339887,    1.6180339887), 
Vector4D(  -1.0000000000,   -0.6180339887,    2.0000000000,    1.6180339887), 
Vector4D(   1.0000000000,   -0.6180339887,    2.0000000000,    1.6180339887), 
Vector4D(  -1.0000000000,    0.6180339887,    2.0000000000,    1.6180339887), 
Vector4D(   1.0000000000,    0.6180339887,    2.0000000000,    1.6180339887), 
Vector4D(  -0.6180339887,    0.0000000000,    2.2360679775,    1.6180339887), 
Vector4D(   0.6180339887,    0.0000000000,    2.2360679775,    1.6180339887), 
Vector4D(   0.0000000000,    0.0000000000,   -2.0000000000,    2.0000000000), 
Vector4D(  -0.6180339887,   -1.0000000000,   -1.6180339887,    2.0000000000), 
Vector4D(   0.6180339887,   -1.0000000000,   -1.6180339887,    2.0000000000), 
Vector4D(  -0.6180339887,    1.0000000000,   -1.6180339887,    2.0000000000), 
Vector4D(   0.6180339887,    1.0000000000,   -1.6180339887,    2.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,   -1.0000000000,    2.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,   -1.0000000000,    2.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,   -1.0000000000,    2.0000000000), 
Vector4D(   1.6180339887,    0.6180339887,   -1.0000000000,    2.0000000000), 
Vector4D(  -1.0000000000,   -1.6180339887,   -0.6180339887,    2.0000000000), 
Vector4D(   1.0000000000,   -1.6180339887,   -0.6180339887,    2.0000000000), 
Vector4D(  -1.0000000000,    1.6180339887,   -0.6180339887,    2.0000000000), 
Vector4D(   1.0000000000,    1.6180339887,   -0.6180339887,    2.0000000000), 
Vector4D(   0.0000000000,   -2.0000000000,    0.0000000000,    2.0000000000), 
Vector4D(  -2.0000000000,    0.0000000000,    0.0000000000,    2.0000000000), 
Vector4D(   2.0000000000,    0.0000000000,    0.0000000000,    2.0000000000), 
Vector4D(   0.0000000000,    2.0000000000,    0.0000000000,    2.0000000000), 
Vector4D(  -1.0000000000,   -1.6180339887,    0.6180339887,    2.0000000000), 
Vector4D(   1.0000000000,   -1.6180339887,    0.6180339887,    2.0000000000), 
Vector4D(  -1.0000000000,    1.6180339887,    0.6180339887,    2.0000000000), 
Vector4D(   1.0000000000,    1.6180339887,    0.6180339887,    2.0000000000), 
Vector4D(  -1.6180339887,   -0.6180339887,    1.0000000000,    2.0000000000), 
Vector4D(   1.6180339887,   -0.6180339887,    1.0000000000,    2.0000000000), 
Vector4D(  -1.6180339887,    0.6180339887,    1.0000000000,    2.0000000000), 
Vector4D(   1.6180339887,    0.6180339887,    1.0000000000,    2.0000000000), 
Vector4D(  -0.6180339887,   -1.0000000000,    1.6180339887,    2.0000000000), 
Vector4D(   0.6180339887,   -1.0000000000,    1.6180339887,    2.0000000000), 
Vector4D(  -0.6180339887,    1.0000000000,    1.6180339887,    2.0000000000), 
Vector4D(   0.6180339887,    1.0000000000,    1.6180339887,    2.0000000000), 
Vector4D(   0.0000000000,    0.0000000000,    2.0000000000,    2.0000000000), 
Vector4D(   0.0000000000,   -0.6180339887,   -1.6180339887,    2.2360679775), 
Vector4D(   0.0000000000,    0.6180339887,   -1.6180339887,    2.2360679775), 
Vector4D(  -1.0000000000,   -1.0000000000,   -1.0000000000,    2.2360679775), 
Vector4D(   1.0000000000,   -1.0000000000,   -1.0000000000,    2.2360679775), 
Vector4D(  -1.0000000000,    1.0000000000,   -1.0000000000,    2.2360679775), 
Vector4D(   1.0000000000,    1.0000000000,   -1.0000000000,    2.2360679775), 
Vector4D(  -1.6180339887,    0.0000000000,   -0.6180339887,    2.2360679775), 
Vector4D(   1.6180339887,    0.0000000000,   -0.6180339887,    2.2360679775), 
Vector4D(  -0.6180339887,   -1.6180339887,    0.0000000000,    2.2360679775), 
Vector4D(   0.6180339887,   -1.6180339887,    0.0000000000,    2.2360679775), 
Vector4D(  -0.6180339887,    1.6180339887,    0.0000000000,    2.2360679775), 
Vector4D(   0.6180339887,    1.6180339887,    0.0000000000,    2.2360679775), 
Vector4D(  -1.6180339887,    0.0000000000,    0.6180339887,    2.2360679775), 
Vector4D(   1.6180339887,    0.0000000000,    0.6180339887,    2.2360679775), 
Vector4D(  -1.0000000000,   -1.0000000000,    1.0000000000,    2.2360679775), 
Vector4D(   1.0000000000,   -1.0000000000,    1.0000000000,    2.2360679775), 
Vector4D(  -1.0000000000,    1.0000000000,    1.0000000000,    2.2360679775), 
Vector4D(   1.0000000000,    1.0000000000,    1.0000000000,    2.2360679775), 
Vector4D(   0.0000000000,   -0.6180339887,    1.6180339887,    2.2360679775), 
Vector4D(   0.0000000000,    0.6180339887,    1.6180339887,    2.2360679775), 
Vector4D(   0.0000000000,   -0.3819660113,   -1.0000000000,    2.6180339887), 
Vector4D(   0.0000000000,    0.3819660113,   -1.0000000000,    2.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,   -0.6180339887,    2.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,   -0.6180339887,    2.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,   -0.6180339887,    2.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,   -0.6180339887,    2.6180339887), 
Vector4D(  -1.0000000000,    0.0000000000,   -0.3819660113,    2.6180339887), 
Vector4D(   1.0000000000,    0.0000000000,   -0.3819660113,    2.6180339887), 
Vector4D(  -0.3819660113,   -1.0000000000,    0.0000000000,    2.6180339887), 
Vector4D(   0.3819660113,   -1.0000000000,    0.0000000000,    2.6180339887), 
Vector4D(  -0.3819660113,    1.0000000000,    0.0000000000,    2.6180339887), 
Vector4D(   0.3819660113,    1.0000000000,    0.0000000000,    2.6180339887), 
Vector4D(  -1.0000000000,    0.0000000000,    0.3819660113,    2.6180339887), 
Vector4D(   1.0000000000,    0.0000000000,    0.3819660113,    2.6180339887), 
Vector4D(  -0.6180339887,   -0.6180339887,    0.6180339887,    2.6180339887), 
Vector4D(   0.6180339887,   -0.6180339887,    0.6180339887,    2.6180339887), 
Vector4D(  -0.6180339887,    0.6180339887,    0.6180339887,    2.6180339887), 
Vector4D(   0.6180339887,    0.6180339887,    0.6180339887,    2.6180339887), 
Vector4D(   0.0000000000,   -0.3819660113,    1.0000000000,    2.6180339887), 
Vector4D(   0.0000000000,    0.3819660113,    1.0000000000,    2.6180339887)};


			int faces[1440][5];
                	FILE * enterF;
                        enterF = fopen("faces.txt", "rb");

                        if (enterF == NULL) {
                                cout << "\n\n-> EL archivo que inserto es vacío.\n\n";
                        }

                        for (int i = 0; i < 1440; i++)
                                for (int j = 0; j < 5; j++)
                                        fscanf(enterF, "%d", &(faces[i][j]));


			int numVertex = 600;	
			for (int i = 0; i < numVertex; i++)
				vertex[i] = Vector4D(creator[i].x(), creator[i].y(), creator[i].z(), creator[i].t());
			
			//Open DOC
                        FILE * enter;
                        enter = fopen("cells.txt", "rb");

                        if (enter == NULL) {
                                cout << "\n\n-> EL archivo que inserto es vacío.\n\n";
                        }
                        //DOC READ
                        int faceNum[120][12];
                        for (int i = 0; i < 120; i++)
                                for (int j = 0; j < 12; j++)
                                        fscanf(enter, "%d", &(faceNum[i][j]));
            		
			//Damos una escala en 4D
           		for(int i = 0; i < numVertex; i++)
          			vertex[i] = r * vertex[i];

			//Definión de Rotación
			double phi = 0.019 * iC;
           		Matrix4D RW = Matrix4D('x', 't', phi);
          		Matrix4D RZ = Matrix4D( 1.0, 0.0, 0.0, 0.0,
                    				0.0, 1.0, 0.0, 0.0,
                    				0.0, 0.0, cos(phi),-sin(phi),
                    				0.0, 0.0, sin(phi), cos(phi));

           		//Rotación en 4D
           		for(int i = 0; i < numVertex; i++)
          			vertex[i] = RZ * vertex[i];
			
			//NORMAL CAL
                        for (int i = 0; i < 120; i++) {

                                Vector4D ret0 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                int face0 = faceNum[i][0];
                                ret0 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret0 = (1.0/5.0) * ret0;

                                Vector4D ret1 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][1];
				ret1 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret1 = (1.0/5.0) * ret1;

                                Vector4D ret2 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][2];
				ret2 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret2 = (1.0/5.0) * ret2;

                                Vector4D ret3 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][3];
				ret3 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret3 = (1.0/5.0) * ret3;

                                Vector4D ret4 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][4];
				ret4 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret4 = (1.0/5.0) * ret4;

                                Vector4D ret5 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][5];
				ret5 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret5 = (1.0/5.0) * ret5;

                                Vector4D ret6 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][6];
				ret6 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret6 = (1.0/5.0) * ret6;

                                Vector4D ret7 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][7];
				ret7 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret7 = (1.0/5.0) * ret7;

                                Vector4D ret8 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][8];
				ret8 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret8 = (1.0/5.0) * ret8;

                                Vector4D ret9 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][9];
				ret9 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret9 = (1.0/5.0) * ret9;

                                Vector4D ret10 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][10];
				ret10 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret10 = (1.0/5.0) * ret10;

                                Vector4D ret11 = Vector4D(0.0, 0.0, 0.0, 0.0);
                                face0 = faceNum[i][11];
				ret11 = vertex[faces[face0][0]] + vertex[faces[face0][1]] + vertex[faces[face0][2]] + vertex[faces[face0][3]] + vertex[faces[face0][4]];
                                ret11 = (1.0/5.0) * ret11;


                                Vector4D ret = Vector4D(0.0, 0.0, 0.0, 0.0);
                                ret = ret + ret0 + ret1 + ret2 + ret3 + ret4 + ret5 + ret6 + ret7 + ret8 + ret9 + ret10 + ret11;
                                ret = (1.0/12.0) * ret;

                                normals[i] = Vector4D(ret.x(), ret.y(), ret.z(), ret.t());
                        }
			
				

			//FIND POLYTOPE CENTER
			for (int i = 0; i < 120; i++)
				center = center + normals[i];

			center = 0.008333 * center;

		} //initMEthod End


		void escHyperDodecahedron() {

			cout << "\n		120 cell vertices\n\n";
			for (int i = 0; i < 600; i++)
				cout << vertex[i] << endl;
		}

		Vector4D getVertex(int i) const { return this->vertex[i];}

		double getVerX(int i, double A) const {return vertex[i].x();}
		double getVerY(int i, double A) const {return vertex[i].y();}
		double getVerZ(int i, double A) const {return vertex[i].z();}
		double getVerT(int i, double A) const {return vertex[i].t();}

		void readEdges() {

			FILE * enter;
			enter = fopen("edges.txt", "rb");

			if (enter == NULL) {
				cout << "\n\n-> EL archivo que inserto es vacío.\n\n";
			}



			for (int i = 0; i < 600; i++)
				for (int j = 0; j < 4; j++)
					fscanf(enter, "%d", &(edges[i][j]));
			
			//cout << "\n\n";
			//for (int i = 0; i < 600; i++)
			//	cout << edges[i][0] << "  " << edges[i][1] << "  " << edges[i][2] << "  " << edges[i][3] << endl;

		}

		double getR() const {return r;}
		int getEdges(int i, int j) const {return edges[i][j];}
		Vector4D getNormal(int i) const {return normals[i];}
		Vector4D getCenter() const {return center;}

};

/*variables*/ 
int ciclo = 0;
int cicloSegund = 0;
int color = 0;
double count = 0.0;
double rotSpeed = 0.0;
double rotAxe = 0.0;
double rad = 10.0;
double rot = 0.0;

int iter0 = 0;
int iter = 0;
int iter1 = 0;
int iter2 = 0;

int pass00 = 0;
int pass0 = 0;
int pass = 0;
int pass1 = 0;
int pass2 = 0;
int ITT = 35;
Vector3D origen = Vector3D(0.0, 0.0, 0.0);
Vector3D I = Vector3D(1.0, 0.0, 0.0);
Vector3D J = Vector3D(0.0, 1.0, 0.0);
Vector3D K = Vector3D(0.0, 0.0, 1.0);
int faces[1440][5];

HyperDodecahedron cell = HyperDodecahedron(0.5, 0.0);

void renderFacetOpenGL(const Vector3D& a, const Vector3D& b, const Vector3D& c, int color) {

	Vector3D n= unit( (b-a) % (c-a) );

	int white = 255;
        if (119-(12*0) > color && color > (119-(12*1))) glColor3ub(white,     0, white);
	if (119-(12*1) > color && color > (119-(12*2))) glColor3ub(   0,  white, white);
	if (119-(12*2) > color && color > (119-(12*3))) glColor3ub(white, white,     0);
	if (119-(12*3) > color && color > (119-(12*4))) glColor3ub(   0,     0,  white);
	if (119-(12*4) > color && color > (119-(12*5))) glColor3ub(white,    0,      0);
	if (119-(12*5) > color && color > (119-(12*6))) glColor3ub(   0, white,      0);
	if (119-(12*6) > color && color > (119-(12*7))) glColor3ub(white, color, white);
	if (119-(12*7) > color && color > (119-(12*8))) glColor3ub(color, color, color);
	if (119-(12*8) > color && color > (119-(12*9))) glColor3ub(white, color, color);
	if (119-(12*9) > color && color > (119-(12*10))) glColor3ub(white, white, color);
	if (119-(12*10) > color && color > (119-(12*11))) glColor3ub(color, white, 0);
	
        glBegin(GL_TRIANGLES);
        glNormal3f( n.x(), n.y(), n.z());
        glVertex3f( a.x(), a.y(), a.z());
	glVertex3f( b.x(), b.y(), b.z());
	glVertex3f( c.x(), c.y(), c.z());
        glEnd();
}

void drawPentagon4D(const Vector4D& p0, const Vector4D& p1, const Vector4D& p2, const Vector4D& p3, const Vector4D& p4, double A, const Vector4D& T, int color) {

	     		double width = abs(p0 - p1);

     			Vector3D v0;
                        double p = A/(A - (p0.t() + T.t()));
                        v0 = Vector3D( p0.x() + T.x(), p0.y() + T.y(), p0.z() + T.z());
                        v0 = p * v0;

                        Vector3D v1;
			p = A/(A - (p1.t() + T.t()));
                        v1 = Vector3D( p1.x() + T.x(), p1.y() + T.y(), p1.z() + T.z());
                        v1 = p * v1;

                        Vector3D v2;
			p = A/(A - (p2.t() + T.t()));
                        v2 = Vector3D( p2.x() + T.x(), p2.y() + T.y(), p2.z() + T.z());
                        v2 = p * v2;

                        Vector3D v3;
			p = A/(A - (p3.t() + T.t()));
                        v3 = Vector3D( p3.x() + T.x(), p3.y() + T.y(), p3.z() + T.z());
                        v3 = p * v3;

                        Vector3D v4;
			p = A/(A - (p4.t() + T.t()));
                        v4 = Vector3D( p4.x() + T.x(), p4.y() + T.y(), p4.z() + T.z());
                        v4 = p * v4;

			renderFacetOpenGL(v0, v2, v1, color);
             		renderFacetOpenGL(v0, v3, v2, color);
             		renderFacetOpenGL(v0, v4, v3, color);

     }


	void drawHyperDodecahedron( const HyperDodecahedron& hyper, int aa, double iC, double iC2, double phi) {
		
	    	////Proyección Estereográfica de R4 a R3

		double A = 1.61 * 1.85 * hyper.getR();
		int numVertices = 600;
		double width = 0.25*0.25;
		Matrix4D Rz = Matrix4D( 1.0, 0.0, 0.0, 0.0,
                                                0.0, 1.0, 0.0, 0.0,
                                                0.0, 0.0, cos(phi),-sin(phi),
                                                0.0, 0.0, sin(phi), cos(phi));
		

	////////////////////DRAW DODECAHEDRON			
			for ( int dodecahedron = 118; dodecahedron >= 0; dodecahedron--) {
			//for ( int dodecahedron = 12; dodecahedron < 24; dodecahedron++) {
				int color = dodecahedron;
				for (int i = dodecahedron * 12; i < (dodecahedron + 1) * 12; i++) {

					Vector4D move = Vector4D(0.0, 0.0, 0.0, 0.0);
					move = move + (  (iC2) * (hyper.getNormal(dodecahedron) - hyper.getCenter()));
					//cout << "\nmove := " << move << endl;
					Vector4D h0 = hyper.getVertex(faces[i][0]);
					Vector4D h1 = hyper.getVertex(faces[i][1]);
					Vector4D h2 = hyper.getVertex(faces[i][2]);
					Vector4D h3 = hyper.getVertex(faces[i][3]);
					Vector4D h4 = hyper.getVertex(faces[i][4]);

					h0 = (iC * (hyper.getNormal(dodecahedron) - h0) + h0);
                                        h1 = (iC * (hyper.getNormal(dodecahedron) - h1) + h1);
                                        h2 = (iC * (hyper.getNormal(dodecahedron) - h2) + h2);
                                        h3 = (iC * (hyper.getNormal(dodecahedron) - h3) + h3);
                                        h4 = (iC * (hyper.getNormal(dodecahedron) - h4) + h4);

					h0 = Rz * h0;
					h1 = Rz * h1;
					h2 = Rz * h2;
					h3 = Rz * h3;
					h4 = Rz * h4;

		 			drawPentagon4D( h0, h1, h2, h3, h4, A, move, color); 
				}


			}



}

/*Funciones para dibujar sin pensar en OpenGL*/
void Setup();
void Draw();
void updateProcessingProto();
void ProcessingProto();
void interface();



//////////////////////////////////////
//                                  //
//                                  //
//        Processing Prototype      //
//                                  //
//                                  //
//////////////////////////////////////

/*Here we build our memory space and filled it with data using initObject methods corresponding to each class.*/
/*initObjects methods are functions that should build memory space and fill it with data*/


///////////////////     SETUP       ///////////////////////
void Setup() {

  if (ciclo == 0) {

          printf("\n\n\n                  ---> Visualizing KxK ---> \n\n\n");
		cell.readEdges();
		FILE * enter;
                        enter = fopen("faces.txt", "rb");

                        if (enter == NULL) {
                                cout << "\n\n-> EL archivo que inserto es vacío.\n\n";
                        }

                        for (int i = 0; i < 1440; i++)
                                for (int j = 0; j < 5; j++)
                                        fscanf(enter, "%d", &(faces[i][j]));
  }
}

//////////////////    UPDATE AUXILIARY FUNCTION ///////////////////

/*In this function we call any method that updates an object in a class.*/
/*Our goal is to define our memory space with initial values.*/
/*Having a memory space filled with initial values we are now able to update these initial values.*/

void updateProcessingProto() {

    if (ciclo > 0) {

          /*For example here we are updating our matrix rotation system.*/
    }
}

///////////////////     DRAW       ///////////////////////

/*Everything is made up of triangles and each class of geometrical objects have triangle drawing methods.*/
void Draw() {

  if (ciclo > 0) {
    /*Draw Here*/
	  drawHyperDodecahedron(cell, 0, rotSpeed, rotAxe, rot);
  }
}


void ProcessingProto() {

  Setup();
  updateProcessingProto();
  Draw();
}

/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/

//////////////////////////////////////
//                                  //
//                                  //
//       OPENGL AS BACKGROUND       //
//                                  //
//                                  //
//////////////////////////////////////

/*Posición y color de luz*/
GLfloat light_diffuse[] = {1.0, 1.0, 1.0, 1.0};
GLfloat light_position[] = {1.0, 1.0, 0.25, 0.0};

/*Funciones de OpenGL*/
void display(void);
void init(double theta);
void TimerFunction(int value);
void keyboard(unsigned char key, int x, int y);
void ProcessMenu(int value);

int main(int argc, char **argv)
{
  
  glutInit(&argc, argv);
  glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
  glutInitWindowSize(1300, 1300);
  glutCreateWindow(" ------- Complex KxK ------- ");
  ProcessMenu(1);
  init(count);

  glutDisplayFunc(display);
  glutKeyboardFunc(keyboard);
  glutTimerFunc(20, TimerFunction, 1);

  glutMainLoop();
  return 0;             /* ANSI C requires main to return int. */
}

void display(void) {
  
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  glClearColor(1.0, 1.0, 1.0, 1.0);
  ProcessingProto();
  glutSwapBuffers();
}

void init(double theta)
{
  /* Setup data. */
  GLfloat ambientLight[] = { 0.3f, 0.3f, 0.3f, 1.0f };
  GLfloat diffuseLight[] = { 0.7f, 0.7f, 0.7f, 1.0f };
  GLfloat specular[] = { 1.0f, 1.0f, 1.0f, 1.0f};
  GLfloat specref[] = { 1.0f, 1.0f, 1.0f, 1.0f };

  /* Enable a single OpenGL light. */
  glLightfv(GL_LIGHT0, GL_DIFFUSE, light_diffuse);
  glLightfv(GL_LIGHT0, GL_POSITION, light_position);
  glEnable(GL_LIGHT0);
  glEnable(GL_LIGHTING);

  /* Use depth buffering for hidden surface elimination. */
  glEnable(GL_DEPTH_TEST);
  glFrontFace(GL_CCW);
  //glEnable(GL_CULL_FACE);

  /*Enable color tracking*/
  glEnable(GL_COLOR_MATERIAL);

  /* Set material properties to follow glColor values*/
  glColorMaterial(GL_FRONT, GL_AMBIENT_AND_DIFFUSE);

  /*All materials have high shine*/
  glMaterialfv(GL_FRONT, GL_SPECULAR, specref);
  glMateriali(GL_FRONT, GL_SHININESS, 128);

  /* Setup the view of the cube. */
  glMatrixMode(GL_PROJECTION);
  gluPerspective( /* field of view in degree */ 40.0,
                              /* aspect ratio */ 1.0,
                                    /* Z near */ 0.5, 
                                    /* Z far */ 10000.0);
  glMatrixMode(GL_MODELVIEW);
//  gluLookAt( 4.01, 4.01, 9.0,      /* eye is at (0,0,5) */
//              0.0, 0.0, 1.0,      /* center is at (0,0,0) */
//             0.0, 0.0, 1.0);      /* up is in positive Y direction */
//
  /* Adjust Board position to be asthetic angle. */
  //glTranslatef(0.0, 0.15, -0.0);
  glRotatef(90, 0.0, 0.0, 1.0);

  glEnable(GL_NORMALIZE);
}

void TimerFunction(int value) {

  count += 0.0;
  rotSpeed += 0.00;
  ciclo += 1;

  if (count > 2 * M_PI) count = 0;
  if (ciclo > 100) ciclo = 1;
	
  glLoadIdentity();
  gluLookAt( rad * cos(count), rad * sin(count), 9.0,      /* eye is at (0,0,5) */
              0.0, 0.0, 1.0,      /* center is at (0,0,0) */
              0.0, 0.0, 1.0);      /* up is in positive Y direction */

  glutPostRedisplay();
  glutTimerFunc(20, TimerFunction, 1);
}

void keyboard(unsigned char key, int x, int y) {
  GLint params[2];

  switch (key) {

    case 'b': 
      rotSpeed += 0.05;
      break;

    case 'B':
      rotSpeed -= 0.05;
      break;

    case 'r':
      count += 0.05;
      break;

    case 'R':
      count -= 0.05;
      break;

    case 'm':
      rotAxe += 0.05;
      break;

    case 'M':
      rotAxe -= 0.05;
      break;

    case 'f':
      rad += 0.05;
      break;

    case 'F':
      rad -= 0.05;
      break;

    case 'v':
      rot += 0.01;
      break;

    case 'V':
      rot -= 0.01;
      break;


  }

  glutPostRedisplay();
}

void ProcessMenu(int value) {
  switch(value) {
    case 1:
      glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
      glEnable(GL_BLEND);
      glEnable(GL_POINT_SMOOTH);
      glHint(GL_POINT_SMOOTH_HINT, GL_NICEST);
      glEnable(GL_LINE_SMOOTH);
      glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);
      glEnable(GL_POLYGON_SMOOTH);
      glHint(GL_POLYGON_SMOOTH_HINT, GL_NICEST);
      break;

    case 2:
      glDisable(GL_BLEND);
      glDisable(GL_LINE_SMOOTH);
      glDisable(GL_POINT_SMOOTH);
      glDisable(GL_POLYGON_SMOOTH);
      break;
    
    default:
      break;
  }

  glutPostRedisplay();
}
